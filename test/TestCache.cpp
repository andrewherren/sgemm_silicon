extern "C" {
  #include "matmul.h"
}
#include <gtest/gtest.h>
#include <vector>

TEST(Cache, CacheBlockRead) {
  // Load test data
  std::vector<float> test_matrix_colmajor{
    0.288899876, 0.910264666, 0.147989546, 0.928247327, 0.440601578, 
    0.30554684, 0.737831029, 0.834543251, 0.232252732, 0.689411546, 
    0.979036653, 0.068305283, 0.621085609, 0.416100248, 0.540883772, 
    0.370676567, 0.19335923, 0.958455785, 0.948207585, 0.56718268, 
    0.312185606, 0.239908869, 0.008393627, 0.913118314, 0.552581082, 
    0.716455223, 0.140801799, 0.748883211, 0.591276375, 0.251409402, 
    0.995377614, 0.571019617, 0.785862394, 0.801614069, 0.36289741, 
    0.686710309, 0.495225727, 0.07991173, 0.225789127, 0.160507119, 
    0.714998426, 0.700188798, 0.997065482, 0.772723528, 0.540415665, 
    0.630178125, 0.731035331, 0.2298281, 0.503383084, 0.66594858, 
    0.766751721, 0.264618759, 0.389116335, 0.075461454, 0.638961583, 
    0.800807147, 0.078641371, 0.41927754, 0.978529904, 0.13029113, 
    0.485521487, 0.814423175, 0.462594833, 0.619269248, 0.318101068, 
    0.918908765, 0.25343811, 0.779329475, 0.913842175, 0.28032197, 
    0.084953903, 0.42109459, 0.485016556, 0.324586792, 0.66601591, 
    0.847445926, 0.84632239, 0.366370481, 0.519172239, 0.45776927, 
    0.882174643, 0.196841477, 0.403511211, 0.797176439, 0.654628004, 
    0.518230373, 0.416161512, 0.557121808, 0.267962726, 0.594379318, 
    0.33317413, 0.462313341, 0.178119084, 0.709013399, 0.045902755, 
    0.884256608, 0.239373734, 0.366857785, 0.468015206, 0.640687522, 
    0.732191133, 0.414753561, 0.733500915, 0.081489389, 0.366071578, 
    0.3820491, 0.656398268, 0.548882598, 0.02906217, 0.507318993, 
    0.202418095, 0.543373498, 0.425628093, 0.807234332, 0.970192638, 
    0.635196376, 0.602248848, 0.213807198, 0.910448289, 0.679179965, 
    0.796902103, 0.402373829, 0.520635165, 0.164620448, 0.213179121, 
    0.43810968, 0.281853984, 0.742846701, 0.82215262, 0.714222461, 
    0.180178005, 0.613684057, 0.997940774, 0.664887855, 0.69956768, 
    0.254893927, 0.141492564, 0.484664937, 0.839393103, 0.85509479, 
    0.13293393, 0.42354132, 0.4674931, 0.147810286, 0.791696043, 
    0.170712401, 0.872668476, 0.283023588, 0.046650717, 0.873185773, 
    0.007349572, 0.913060327, 0.218953462, 0.764163448, 0.630660544, 
    0.097894516, 0.127940546, 0.52166732, 0.373134729, 0.977159325, 
    0.94184074, 0.545554016, 0.088408834, 0.252686436, 0.853579416, 
    0.183193582, 0.007875853, 0.579510423, 0.962601983, 0.698158808, 
    0.654350901, 0.443978138, 0.94727644, 0.858256956, 0.907774752, 
    0.307127039, 0.492586853, 0.978010733, 0.955124478, 0.553552437, 
    0.002819393, 0.40632183, 0.120769548, 0.926409653, 0.329511208, 
    0.715667212, 0.480689827, 0.191140222, 0.089903001, 0.649885891, 
    0.609187514, 0.450033637, 0.518449093, 0.917568133, 0.918612205, 
    0.834600182, 0.500809577, 0.469108471, 0.341054064, 0.306467225
  };

  // Initialize block to be packed
  int m = 10;
  int k = 20;
  int mc = 6;
  int kc = 4;
  int mr = 3;
  std::vector<float> packed_block(mc * kc, 0.0);

  // Pack the block
  pack_panelA(test_matrix_colmajor.data(), packed_block.data(), m, k, mc, kc, 0, 0, mr);
  
  // Check some of the data elements
  EXPECT_NEAR(0.288899876, packed_block[0], 0.0001);
  EXPECT_NEAR(0.910264666, packed_block[1], 0.0001);
  EXPECT_NEAR(0.147989546, packed_block[2], 0.0001);
  EXPECT_NEAR(0.979036653, packed_block[3], 0.0001);
  EXPECT_NEAR(0.068305283, packed_block[4], 0.0001);
  EXPECT_NEAR(0.621085609, packed_block[5], 0.0001);
  EXPECT_NEAR(0.312185606, packed_block[6], 0.0001);
  EXPECT_NEAR(0.239908869, packed_block[7], 0.0001);
  EXPECT_NEAR(0.008393627, packed_block[8], 0.0001);
  EXPECT_NEAR(0.995377614, packed_block[9], 0.0001);
  EXPECT_NEAR(0.571019617, packed_block[10], 0.0001);
  EXPECT_NEAR(0.785862394, packed_block[11], 0.0001);
  EXPECT_NEAR(0.928247327, packed_block[12], 0.0001);
  EXPECT_NEAR(0.440601578, packed_block[13], 0.0001);
  EXPECT_NEAR(0.30554684, packed_block[14], 0.0001);
  EXPECT_NEAR(0.416100248, packed_block[15], 0.0001);
  EXPECT_NEAR(0.540883772, packed_block[16], 0.0001);
  EXPECT_NEAR(0.370676567, packed_block[17], 0.0001);
}

